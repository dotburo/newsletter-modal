{"version":3,"file":"NewsletterModal.js","sources":["../src/js/defaults.js","../src/js/templates.js","../src/js/DomElement.js","../src/js/NewsletterModal.js","../src/js/NewsletterValidator.js","../src/js/NewsletterButton.js"],"sourcesContent":["export default {\n    url: null,\n    headers: {},\n    fields: {\n        firstname: false,\n        lastname: false,\n        email: true,\n        gdprCheckbox: false,\n        gdprNotice: false,\n    },\n    submitButtonText: 'Submit',\n    successMessage: 'Success!',\n};\n\nexport const INPUT_NAME_EMAIL = 'nws_email';\nexport const INPUT_NAME_CHECK = 'nws_gdpr';\nexport const INPUT_NAME_FIRST = 'nws_first';\nexport const INPUT_NAME_LAST = 'nws_last';\n","/**\n * Base newsletter subscription modal.\n * @param {object} options\n * @return string HTML\n */\nimport {INPUT_NAME_CHECK, INPUT_NAME_EMAIL, INPUT_NAME_FIRST, INPUT_NAME_LAST} from './defaults';\n\nexport const form = (options) => `\n<div class=\"modal-dialog modal-dialog-centered\">\n    <form class=\"modal-content\" action=\"/\" method=\"POST\">\n        <div class=\"modal-header\">\n            <h5 class=\"modal-title\">${options.title ? options.title : 'Subscribe to our newsletter'}</h5>\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n              <span aria-hidden=\"true\" style=\"pointer-events: none\">&times;</span>\n            </button>\n        </div>\n        <div class=\"modal-body\">\n${\n    (options.fields.firstname ? firstName(options.fields.firstname) : '')\n    + (options.fields.lastname ? lastName(options.fields.lastname) : '')\n    + email(options.fields.email)\n    + (options.fields.gdprCheckbox ? gdprCheckbox(options.fields.gdprCheckbox) : '')\n}\n        </div>\n        <div class=\"modal-footer justify-content-between flex-wrap\">\n            ${options.fields.gdprNotice ? gdprNoticeLink(options.fields.gdprNotice) : '<span></span>'}\n            <button type=\"submit\" class=\"btn btn-primary nws-btn-submit\">${options.submitButtonText}</button>\n            ${options.fields.gdprNotice ? gdprNoticeText(options.fields.gdprNotice) : ''}\n        </div>\n    </form>\n</div>\n`;\n\n/**\n * Explicit agreement checkbox for GDPR.\n * @param {object} options\n * @return string HTML\n */\nconst gdprCheckbox = (options) => `\n<div>\n    <input type=\"checkbox\" id=\"nws-gdpr-check\" name=\"${INPUT_NAME_CHECK}\" required>\n    <label for=\"nws-gdpr-check\">${options.label}</label>\n    <span class=\"invalid-feedback\">${options.invalid || 'This is required.'}</span>\n</div>\n`;\n\n/**\n * A link to a privacy policy page or a button to toggle the GDPR disclaimer in the modal's footer.\n * @param {object} options\n * @return string HTML\n */\nconst gdprNoticeLink = (options) => {\n    if (options.url) {\n        return `<a href=\"${options.url}\" target=\"_blank\" rel=\"noreferrer\">${options.label}</a>`;\n    }\n\n    if (options.text) {\n        return `<a href=\"#\" class=\"nws-gdpr-btn\">${options.label} <span>ðŸ›ˆ</span></a>`;\n    }\n\n    return '';\n};\n\n/**\n * A collapsible GDPR disclaimer in the modal's footer.\n * @param {object} options\n * @return string HTML\n */\nconst gdprNoticeText = (options) => `\n<div class=\"nws-flex-break\"></div>\n<div class=\"nws-gdpr-txt\">\n    <div class=\"nws-gdpr-txt-inner\">${options.text}</div>\n</div>\n`;\n\n/**\n * Default required email field.\n * @param {object} options\n * @return string HTML\n */\nconst email = (options = {}) => `\n<label class=\"${!options.label ? 'sr-only' : ''}\">${options.label || 'Email'}</label>\n<div class=\"input-group\">\n    ${options.icon ? inputGroupIcon(options.icon) : ''}\n    <input type=\"email\" name=\"${INPUT_NAME_EMAIL}\" placeholder=\"Email\" required autocomplete=\"email\" class=\"form-control\" value=\"a@a.com\">\n    <div class=\"invalid-feedback\">${options.invalid || 'Please provide a valid email address.'}</div>\n</div>\n`;\n\n/**\n * First name field.\n * @param {object} options\n * @return string HTML\n */\nconst firstName = (options = {}) => `\n<label class=\"${!options.label ? 'sr-only' : ''}\">${options.label || 'First name'}</label>\n<div class=\"input-group\">\n    ${options.icon ? inputGroupIcon(options.icon) : ''}\n    <input type=\"text\" name=\"${INPUT_NAME_FIRST}\" placeholder=\"${options.placeholder || 'First name'}\" required class=\"form-control\">\n    <div class=\"invalid-feedback\">${options.invalid || 'Please provide a valid first name.'}</div>\n</div>\n`;\n\n/**\n * Last name field.\n * @param {object} options\n * @return string HTML\n */\nconst lastName = (options = {}) => `\n<label class=\"${!options.label ? 'sr-only' : ''}\">${options.label || 'Last name'}</label>\n<div class=\"input-group\">\n    ${options.icon ? inputGroupIcon(options.icon) : ''}\n    <input type=\"text\" name=\"${INPUT_NAME_LAST}\" placeholder=\"${options.placeholder || 'Last name'}\" required class=\"form-control\">\n    <div class=\"invalid-feedback\">${options.invalid || 'Please provide a valid last name.'}</div>\n</div>\n`;\n\n/**\n * The button to toggle the modal.\n * @param {string} label\n * @param {string} title\n * @return string HTML\n */\nexport const button = (label = 'Subscribe', title = '') => `\n<aside class=\"nws-cta\">\n    ${title ? `<h1>${title}</h1>`: ''}\n    <button type=\"button\" class=\"btn btn-primary\">${label}</button>\n</aside>\n`;\n\n/**\n * Show the user the request is being send.\n * @return string HTML\n */\nexport const spinner = () => 'sending...';\n\n/**\n * HTML for prepending an icon to an input field.\n * @param {string} icon\n * @return string HTML\n */\nconst inputGroupIcon = icon => {\n    return `\n<div class=\"input-group-prepend\">\n  <div class=\"input-group-text ${icon}\"></div>\n</div>\n`;\n};\n","const\n    d = document,\n    DEFAULTS = {\n        toggled: false,\n        classes: {\n            toggled: 'toggled'\n        }\n    };\n\nexport default class DomElement {\n    constructor(element, options = {}) {\n        this._options = options = Object.assign({}, DEFAULTS, options);\n\n        this._toggled = false;\n\n        this._events = [];\n\n        this._el = this._setElement(element);\n\n        if (options.toggled) {\n            this.toggle(true);\n        }\n    }\n\n    /**\n     * Display or hide element by adding or removing the classname.\n     * @param {Boolean|undefined} state\n     * @return DomElement\n     */\n    toggle(state = undefined) {\n        let classname = this.getOptions('classes').toggled;\n\n        this._toggled = state !== undefined ? state : !this._toggled;\n\n        this._el.classList[this._toggled ? 'add' : 'remove'](classname);\n\n        return this;\n    }\n\n    /**\n     * Bind a (delegated) event.\n     * @param {String} event\n     * @param {Function} fn\n     * @param {HTMLElement|Document} el\n     * @return DomElement\n     */\n    on(event, fn, el = null) {\n        (el || this._el).addEventListener(event, fn = fn.bind(this), true);\n\n        this._events.push({\n            name: event,\n            fn: fn,\n            el: el\n        });\n\n        return this;\n    }\n\n    /**\n     * Return the main wrapping element.\n     * @return {Element}\n     */\n    getElement(selector = '') {\n        return !selector ? this._el : this._el.querySelector(selector);\n    }\n\n    /**\n     * Check if the root element has child one.\n     * @return {Boolean}\n     */\n    hasElement(selector) {\n        return !!this._el.querySelector(selector);\n    }\n\n    /**\n     * Return the options.\n     * @param {string|null} key\n     * @return {object}\n     */\n    getOptions(key = null) {\n        return !key ? this._options : this._options[key];\n    }\n\n    /**\n     * Unbind all events and nullify references\n     * @return void\n     */\n    remove() {\n        this._events = this._events.filter(event => {\n            return (event.el || this._el).removeEventListener(event.name, event.fn, true);\n        });\n\n        this._el.parentNode.removeChild(this._el);\n\n        this._el = null;\n\n        this._options = DEFAULTS;\n    }\n\n    /**\n     * Query the element in the DOM if its a string\n     * @param {Element|String} el\n     * @return {Element|null}\n     * @protected\n     */\n    _setElement(el) {\n        if (!el || (!el.nodeType && typeof el !== 'string')) {\n            throw new Error('Wrong element type provided!');\n        }\n\n        if (el.nodeType) return el;\n\n        return (this._options.parent || d).querySelector(el);\n    }\n\n    /**\n     * Communicate changes\n     * @param {String} name\n     * @param {Object|null} detail\n     * @protected\n     */\n    _trigger(name, detail = null) {\n        let event;\n\n        if (typeof CustomEvent === 'function') {\n            event = new CustomEvent(name, {\n                detail: detail,\n                bubbles: true,\n                cancelable: true\n            });\n        } else {\n            event = d.createEvent('CustomEvent');\n            event.initCustomEvent(name, true, true, detail);\n        }\n\n        this._el.dispatchEvent(event);\n    }\n}\n","import {form, spinner} from './templates';\nimport DomElement from './DomElement';\n\nexport default class NewsletterModal extends DomElement {\n    constructor(element, options = {}, validator) {\n        super(element, options);\n\n        this.validator = validator;\n\n        this._render();\n    }\n\n    /**\n     * Instantiate the base element, which will hold the form.\n     * @return {HTMLDivElement}\n     */\n    static createElement() {\n        const el = document.createElement('div');\n\n        el.className = 'nws-modal modal';\n\n        return el;\n    }\n\n    /**\n     * Create the form and bind its events.\n     * @return void\n     * @private\n     */\n    _render() {\n        this.getElement().innerHTML = form(this.getOptions());\n\n        document.body.appendChild(this.getElement());\n\n        this.toggle(true);\n\n        this.on('submit', this._handleSubmit)\n            .on('click', this._handleClose)\n            .on('keyup', this._handleClose, document.body);\n\n        if (this.hasElement('.nws-gdpr-txt')) {\n            this.on('click', this._toggleGdpr, this.getElement('.nws-gdpr-btn'));\n        }\n    }\n\n    /**\n     * Close the form modal.\n     * @param {MouseEvent} e\n     * @private\n     */\n    _handleClose(e) {\n        const toggledClass = this.getOptions('classes').toggled,\n            clickedWrapper = e.target.classList.contains(toggledClass),\n            clickedButton = e.target.classList.contains('close'),\n            pressedEscape = e.key === 'Escape';\n\n        if (clickedWrapper || pressedEscape || clickedButton) {\n            e.preventDefault();\n            this.toggle(false);\n        }\n    }\n\n    /**\n     * Validate the data and display messages accordingly.\n     * @param {MouseEvent} e\n     * @private\n     */\n    _handleSubmit(e) {\n        e.preventDefault();\n\n        this._setLoading(true);\n\n        const form = this.getElement('form');\n\n        if (!this.validator.validate(form)) {\n            this._setLoading(false);\n            return;\n        }\n\n        this._submit(this.validator.getData())\n            .then(response => {\n                if (response.ok) {\n                    return this._message(this.getOptions('successMessage'));\n                }\n\n                throw new Error(response.statusText);\n            })\n            .catch(error => {\n                this._message(error.message)\n                    ._setLoading(false);\n            });\n    }\n\n    /**\n     * Send the data to the server.\n     * @param {object} data\n     * @return {Promise<Response>}\n     * @private\n     */\n    _submit(data) {\n        return window.fetch(this.getOptions('url'), {\n            method: 'POST',\n            headers: Object.assign(this.getOptions('headers'), {\n                'Content-Type': 'application/json',\n            }),\n            body: JSON.stringify(data)\n        });\n    }\n\n    /**\n     * Show the user the request is being made.\n     * @param {boolean} state\n     * @return {NewsletterModal}\n     * @private\n     */\n    _setLoading(state) {\n        const btn = this.getElement('.nws-btn-submit');\n\n        if (state) {\n            btn.innerHTML = spinner();\n        } else {\n            btn.innerHTML = this.getOptions('submitButtonText');\n        }\n\n        return this;\n    }\n\n    /**\n     * Show an error or success message in the form.\n     * @param {string} msg\n     * @return {NewsletterModal}\n     * @private\n     */\n    _message(msg) {\n        this.getElement('.nws-msg').textContent = msg;\n\n        return this;\n    }\n\n    /**\n     * Hide or show the GDPR disclaimer.\n     * @return void\n     * @private\n     */\n    _toggleGdpr() {\n        const notice = this.getElement('.nws-gdpr-txt');\n\n        if (notice.classList.toggle('toggled')) {\n            notice.style.height = notice.firstElementChild.clientHeight + 'px';\n        } else {\n            notice.style.height = '0';\n        }\n    }\n}\n","import {INPUT_NAME_CHECK, INPUT_NAME_EMAIL, INPUT_NAME_FIRST, INPUT_NAME_LAST} from './defaults';\n\nexport default class {\n    constructor() {\n        this.validationMap = {\n            [INPUT_NAME_EMAIL]: this._validateEmail.bind(this),\n            [INPUT_NAME_CHECK]: this._validateGdprCheck.bind(this),\n            [INPUT_NAME_FIRST]: this._validateName.bind(this),\n            [INPUT_NAME_LAST]: this._validateName.bind(this),\n        };\n\n        this._data = {};\n    }\n\n    /**\n     * Validate all element of the given form.\n     * @param {HTMLFormElement} form\n     * @return {boolean}\n     */\n    validate(form) {\n        const elements = form.elements;\n\n        let valid = true;\n\n        for(let i = 0, l = elements.length, element; i < l; i++) {\n            element = elements.item(i);\n            if (element.name) {\n                valid = this.validationMap[element.name](element);\n            }\n        }\n\n        return valid;\n    }\n\n    /**\n     * Validate the email.\n     * @param {HTMLInputElement} element\n     * @return {boolean}\n     * @private\n     */\n    _validateEmail(element) {\n        const valid = /^.*@.*..*/.test(element.value);\n\n        if (valid) {\n            this._setData(element.name, element.value);\n        }\n\n        this._setElement(element, valid);\n\n        return valid;\n    }\n\n    /**\n     * Validate the first or last name.\n     * @param {HTMLInputElement} element\n     * @return {boolean}\n     * @private\n     */\n    _validateName(element) {\n        const valid = !element.value.match(/\\d/g);\n\n        if (valid) {\n            this._setData(element.name, element.value);\n        }\n\n        this._setElement(element, valid);\n\n        return valid;\n    }\n\n    /**\n     * Make sure the GDPR checkbox is checked.\n     * @param {HTMLInputElement} element\n     * @return {boolean}\n     * @private\n     */\n    _validateGdprCheck(element) {\n        const valid = element.checked;\n\n        if (valid) {\n            this._setData(element.name, true);\n        }\n\n        this._setElement(element, valid);\n\n        return valid;\n    }\n\n    _setElement(element, state) {\n        element.classList[state ? 'remove' : 'add']('is-invalid');\n    }\n\n    /**\n     * Store the valid data.\n     * @param {string} key\n     * @param {*} value\n     * @private\n     */\n    _setData(key, value) {\n        this._data[key] = value;\n    }\n\n    /**\n     * Return the valid data.\n     * @return {{}}\n     */\n    getData() {\n        return this._data;\n    }\n}\n","import {button} from './templates';\nimport DomElement from './DomElement';\nimport defaults from './defaults';\nimport NewsletterModal from './NewsletterModal';\nimport NewsletterValidator from './NewsletterValidator';\n\nimport '../css/bootstrapped.scss';\n\nconst CLASSNAME_TOGGLED = 'nws-toggled';\n\nlet modalInstance = null;\n\nexport default class extends DomElement {\n    constructor(element, options = {}) {\n        options = Object.assign({}, defaults, options);\n\n        options.fields = options.fields || {};\n        options.classes = options.classes || {};\n        options.classes.toggled = CLASSNAME_TOGGLED;\n\n        super(element, options);\n\n        this._render();\n    }\n\n    /**\n     * Render the button to open the modal.\n     * @protected\n     */\n    _render() {\n        this.getElement().innerHTML = button();\n\n        this.on('click', this._handleSubscribeButton);\n    }\n\n    /**\n     * Instantiate and/or toggle the modal.\n     * @return void\n     * @protected\n     */\n    _handleSubscribeButton() {\n        if (modalInstance) {\n            modalInstance.toggle(true);\n            return;\n        }\n\n        modalInstance = new NewsletterModal(\n            NewsletterModal.createElement(),\n            this.getOptions(),\n            new NewsletterValidator()\n        );\n    }\n}\n"],"names":["url","headers","fields","firstname","lastname","email","gdprCheckbox","gdprNotice","submitButtonText","successMessage","options","label","invalid","gdprNoticeLink","text","gdprNoticeText","icon","inputGroupIcon","firstName","placeholder","lastName","d","document","DEFAULTS","toggled","classes","DomElement","constructor","element","this","_options","Object","assign","_toggled","_events","_el","_setElement","toggle","state","classname","getOptions","undefined","classList","on","event","fn","el","addEventListener","bind","push","name","getElement","selector","querySelector","hasElement","key","remove","filter","removeEventListener","parentNode","removeChild","nodeType","Error","parent","_trigger","detail","CustomEvent","bubbles","cancelable","createEvent","initCustomEvent","dispatchEvent","NewsletterModal","validator","super","_render","static","createElement","className","innerHTML","title","body","appendChild","_handleSubmit","_handleClose","_toggleGdpr","e","toggledClass","clickedWrapper","target","contains","clickedButton","pressedEscape","preventDefault","_setLoading","form","validate","_submit","getData","then","response","ok","_message","statusText","catch","error","message","data","window","fetch","method","JSON","stringify","btn","msg","textContent","notice","style","height","firstElementChild","clientHeight","validationMap","nws_email","_validateEmail","nws_gdpr","_validateGdprCheck","nws_first","_validateName","nws_last","_data","elements","valid","i","l","length","item","test","value","_setData","match","checked","modalInstance","defaults","button","_handleSubscribeButton","NewsletterValidator"],"mappings":"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"}